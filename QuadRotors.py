from math import cos, sin, pi


def solve_diff_game_Quad(x, Q, P_sol, R):
    Ixx = 7.5e-3
    Iyy = 7.5e-3
    Izz = 1.3e-2
    m = 0.65
    l = 0.23
    Jr = 6e-5

    a1 = (Iyy - Izz) / Ixx
    a2 = Jr / Ixx
    a3 = (Izz - Ixx) / Iyy
    a4 = Jr / Iyy
    a5 = (Ixx - Iyy) / Izz

    b1 = l / Ixx
    b2 = l / Iyy
    b3 = 1 / Izz

    A = np.array([[0, 1, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, (1 / 2) * a1 * x[6], 0, (1 / 2) * a1 * x[4], 0, 0],
                  [0, 0, 0, 1, 0, 0, 0, 0],
                  [0, (1 / 2) * a3 * x[6], 0, 0, 0, (1 / 2) * a3 * x[2], 0, 0],
                  [0, 0, 0, 0, 0, 1, 0, 0],
                  [0, (1 / 2) * a5 * x[4], 0, (1 / 2) * a5 * x[2], 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 1],
                  [0, 0, 0, 0, 0, 0, 0, 0]])

    B1 = np.array([[0],
                   [0],
                   [0],
                   [0],
                   [0],
                   [0],
                   [0],
                   [-(1 / m) * cos(x[1]) * cos(x[3])]])

    B2 = np.array([[0],
                   [b1],
                   [0],
                   [0],
                   [0],
                   [0],
                   [0],
                   [0]])

    B3 = np.array([[0],
                   [0],
                   [0],
                   [b2],
                   [0],
                   [0],
                   [0],
                   [0]])

    B4 = np.array([[0],
                   [0],
                   [0],
                   [0],
                   [0],
                   [b3],
                   [0],
                   [0]])

    B = [B1, B2, B3, B4]

    P = solve_diff_game(A=A, B=B, Q=Q, R=R, P_f=P_sol, cl=True, show_legend=False)
    return P[-1]


Q1 = np.array([[10, 0, 0, 0, 0, 0, 0, 0],
               [0, 10, 0, 0, 0, 0, 0, 0],
               [0, 0, 10, 0, 0, 0, 0, 0],
               [0, 0, 0, 10, 0, 0, 0, 0],
               [0, 0, 0, 0, 10, 0, 0, 0],
               [0, 0, 0, 0, 0, 10, 0, 0],
               [0, 0, 0, 0, 0, 0, 1000, 0],
               [0, 0, 0, 0, 0, 0, 0, 1000]])

Q2 = np.array([[1000, 0, 0, 0, 0, 0, 0, 0],
               [0, 1000, 0, 0, 0, 0, 0, 0],
               [0, 0, 10, 0, 0, 0, 0, 0],
               [0, 0, 0, 10, 0, 0, 0, 0],
               [0, 0, 0, 0, 10, 0, 0, 0],
               [0, 0, 0, 0, 0, 10, 0, 0],
               [0, 0, 0, 0, 0, 0, 10, 0],
               [0, 0, 0, 0, 0, 0, 0, 10]])

Q3 = np.array([[10, 0, 0, 0, 0, 0, 0, 0],
               [0, 10, 0, 0, 0, 0, 0, 0],
               [0, 0, 1000, 0, 0, 0, 0, 0],
               [0, 0, 0, 1000, 0, 0, 0, 0],
               [0, 0, 0, 0, 10, 0, 0, 0],
               [0, 0, 0, 0, 0, 10, 0, 0],
               [0, 0, 0, 0, 0, 0, 10, 0],
               [0, 0, 0, 0, 0, 0, 0, 10]])

Q4 = np.array([[10, 0, 0, 0, 0, 0, 0, 0],
               [0, 10, 0, 0, 0, 0, 0, 0],
               [0, 0, 10, 0, 0, 0, 0, 0],
               [0, 0, 0, 10, 0, 0, 0, 0],
               [0, 0, 0, 0, 1000, 0, 0, 0],
               [0, 0, 0, 0, 0, 1000, 0, 0],
               [0, 0, 0, 0, 0, 0, 10, 0],
               [0, 0, 0, 0, 0, 0, 0, 10]])

R1 = np.array([[0.1]])
R2 = np.array([[0.1]])
R3 = np.array([[0.1]])
R4 = np.array([[0.1]])

R = [R1, R2, R3, R4]
Q = [Q1, Q2, Q3, Q4]
P_f = Q
X_rotor_0 = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1.21, 0, 0, 0,
                      0, 0])
P_static = solve_diff_game_Quad(X_rotor_0, Q, P_f, R)